
/*1.需要根据模式修改类型*/
if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion build_version.target_sdk
    buildToolsVersion build_version.build_tools


    defaultConfig {
        minSdkVersion build_version.min_sdk
        targetSdkVersion build_version.target_sdk
        versionCode 1
        versionName "1.0"


        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        /*2.ARouter 配置,使用到的每个module都需要配置;*/
        /*包括common*/
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    sourceSets {
        main{
            if (isModule.toBoolean()) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            }else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java{
                    exclude 'debug/**'
                }
            }
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api project(':commonlib')
    // ARouter
    /* 每个module都需要加入*/
    api deps.arouter_api
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    annotationProcessor deps.arouter_compiler
    annotationProcessor deps.buffer_knife_compiler
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
